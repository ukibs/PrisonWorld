<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_adventurer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Variables
destinationX = x;
destinationY = y;
/*Actions
    0 - Enter settlement
    1 - Stop / Camp
*/
action = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Go to the marked point
if(distance_to_point(destinationX, destinationY) &gt; 10){
    move_towards_point(destinationX, destinationY, 5);
}
else
    speed = 0;
//Save the position
global.lastX = x;
global.lastY = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_unknown_place">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Destreoy the unknown tile and check to create more
    next_index = array_length_1d(global.map_tile);
    global.map_tile[next_index] = instance_create(other.x, other.y, obj_test_place);
    //Save its x
    global.hex[next_index, 0] = global.map_tile[next_index].x;
    //Save its y
    global.hex[next_index, 1] = global.map_tile[next_index].y;
    //Decide a terrain for it
    /*Terrain type
        0 - Settlement
        1 - Plains
        2 - Forest
        3 - Swamp
    */
    global.hex[next_index, 2] = irandom_range(1, 3);
    global.map_tile[next_index].terrain = global.hex[next_index, 2];
    //And destroy the unknown one
    with(other) instance_destroy();
    //obj_map_manager.check = true;
    //Upper one
        if(place_empty(other.x, 
                        other.y - sprite_get_height(spr_test_place)))
            instance_create(other.x, 
                        other.y - sprite_get_height(spr_test_place),
                        obj_unknown_place);
        //
        if(place_empty(other.x + (sprite_get_width(spr_test_place)*3/4), 
                        other.y - sprite_get_height(spr_test_place)/2))
            instance_create(other.x + (sprite_get_width(spr_test_place)*3/4), 
                        other.y - sprite_get_height(spr_test_place)/2,
                        obj_unknown_place);
        //
        if(place_empty(other.x + (sprite_get_width(spr_test_place)*3/4), 
                        other.y + sprite_get_height(spr_test_place)/2))
            instance_create(other.x + (sprite_get_width(spr_test_place)*3/4), 
                        other.y + sprite_get_height(spr_test_place)/2,
                        obj_unknown_place);
        //Down one
        if(place_empty(other.x, 
                        other.y + sprite_get_height(spr_test_place)))
            instance_create(other.x, 
                        other.y + sprite_get_height(spr_test_place),
                        obj_unknown_place);
        //
        if(place_empty(other.x - (sprite_get_width(spr_test_place)*3/4), 
                        other.y - sprite_get_height(spr_test_place)/2))
            instance_create(other.x - (sprite_get_width(spr_test_place)*3/4), 
                        other.y - sprite_get_height(spr_test_place)/2,
                        obj_unknown_place);
        //
        if(place_empty(other.x - (sprite_get_width(spr_test_place)*3/4), 
                        other.y + sprite_get_height(spr_test_place)/2))
            instance_create(other.x - (sprite_get_width(spr_test_place)*3/4), 
                        other.y + sprite_get_height(spr_test_place)/2,
                        obj_unknown_place);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_test_place">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get the type of terrain for the action
switch(other.terrain){
    //Settlement
    case 0:
        action = 0;
    break;
    //The others
    default:
        action = 1;
    break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Show possible action
if(action == 0)
    draw_text(1300, 680, "B ENTER SETTLEMENT");
else
    draw_text(1300, 680, "B STOP/CAMP");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
