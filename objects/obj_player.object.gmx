<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_warrior_front_move</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Variables
pushing = false;

//Datos de manejo
player_num = 0;
direction = 270;
looking_direction = 270; //Alternativa
status_down = 0;
status_locked = false;
movement_speed = 10;    //La acabaremos asignando junto con los stats
/*Actions
    0 - No action
    1 - Raise mate
*/
action = 0; 

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Third ability end
script_execute(scr_abilities_end, global.player[player_num, 16]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//First ability end
script_execute(scr_abilities_end, global.player[player_num, 6]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get keys (if not locked)
//if(status_locked == false){
    //Check if gampead or keyboard player
    if(global.player[player_num, 0] == 1){
        gamepad_set_axis_deadzone(player_num, 0.2);
        key_up = gamepad_button_check(player_num, gp_padu) || gamepad_axis_value(0, gp_axislv) &lt; -0.2;
        key_down = gamepad_button_check(player_num, gp_padd) || gamepad_axis_value(0, gp_axislv) &gt; 0.2;
        key_left = gamepad_button_check(player_num, gp_padl) || gamepad_axis_value(0, gp_axislh) &lt; -0.2;
        key_right = gamepad_button_check(player_num, gp_padr) || gamepad_axis_value(0, gp_axislh) &gt; 0.2;
        
        key_action_1_pressed = gamepad_button_check_pressed(player_num, gp_face1);
        key_action_1_maintained = gamepad_button_check(player_num, gp_face1);
        key_action_1_released = gamepad_button_check_released(player_num, gp_face1);
        
        key_action_2_pressed = gamepad_button_check_pressed(player_num, gp_face2);
        key_action_2_maintained = gamepad_button_check(player_num, gp_face2);
        key_action_2_released = gamepad_button_check_released(player_num, gp_face2);
        
        key_action_3_pressed = gamepad_button_check_pressed(player_num, gp_face3);
        key_action_3_maintained = gamepad_button_check(player_num, gp_face3);
        key_action_3_released = gamepad_button_check_released(player_num, gp_face3);
        
        key_action_4_pressed = gamepad_button_check_pressed(player_num, gp_face4);
        key_action_4_maintained = gamepad_button_check(player_num, gp_face4);
        key_action_4_released = gamepad_button_check_released(player_num, gp_face4);
    }
    else{
        key_up = keyboard_check(vk_up);
        key_down = keyboard_check(vk_down);
        key_left = keyboard_check(vk_left);
        key_right = keyboard_check(vk_right);
        key_action_1_pressed = keyboard_check_pressed(ord('S'));
        key_action_1_maintained = keyboard_check(ord('S'));
        key_action_1_released = keyboard_check_released(ord('S'));
        key_action_2_pressed = keyboard_check_pressed(ord('D'));
        key_action_2_maintained = keyboard_check(ord('S'));
        key_action_2_released = keyboard_check_released(ord('S'));
        key_action_3_pressed = keyboard_check_pressed(ord('A'));
        key_action_3_maintained = keyboard_check(ord('S'));
        key_action_3_released = keyboard_check_released(ord('S'));
        key_action_4_pressed = keyboard_check_pressed(ord('W'));
        key_action_4_maintained = keyboard_check(ord('S'));
        key_action_4_released = keyboard_check_released(ord('S'));
    }
//}
//If not locked (not here now)
if(status_locked == false){
    //Move it
    //Moving direction
    v_direction = (-key_up + key_down);
    h_direction = (-key_left + key_right);

    //Direction facing
    /*if(v_direction != 0)
        direction = v_direction * -90;
    if(h_direction != 0)
        direction = h_direction * 90 -90;*/
    if(v_direction == -1)
        looking_direction = 90;
    else if(v_direction == 1)
        looking_direction = 270;
    else if(h_direction == -1)
        looking_direction = 180;
    else if(h_direction == 1)
        looking_direction = 0;
    //Movement
        //De momento sin h/vspeed
    y += v_direction * movement_speed;
    x += h_direction * movement_speed;
    
    //Sprite_control
    switch(looking_direction){
        //Right
        case 0:
            sprite_index = global.player[player_num, 23];
        break;
        //Up
        case 90:
            sprite_index = global.player[player_num, 24];
        break;
        //Left
        case 180:
            sprite_index = global.player[player_num, 22];
        break;
        //Down
        case 270:
            sprite_index = global.player[player_num, 21];
        break;
    }
    //First ability
        //We go with all the possible combinations to the ability
            //The proper ability will decide wich one it uses
            //In some abilities it doesnÂ´t matter
    if((key_action_1_pressed || key_action_1_maintained || key_action_1_released) 
        &amp;&amp; alarm_get(1) == -1){
        //Le pasamos el nombre de la habilidad y las alarmas que usa
        script_execute(scr_abilities, global.player[player_num, 6], 
                        global.player[player_num, 8], 
                        global.player[player_num, 9]);
    }
    //Second
    if((key_action_2_pressed || key_action_2_maintained || key_action_2_released) 
        &amp;&amp; alarm_get(3) == -1){
        script_execute(scr_abilities, global.player[player_num, 11], 
                        global.player[player_num, 13], 
                        global.player[player_num, 14]);
    }
    //Third
    if((key_action_3_pressed || key_action_3_maintained || key_action_3_released) 
        &amp;&amp; alarm_get(5) == -1){
        script_execute(scr_abilities, global.player[player_num, 16], 
                        global.player[player_num, 18], 
                        global.player[player_num, 19]);
    }
}

//Out of combat
if(global.player[player_num, 3] &lt;= 0){
    global.player[player_num, 3] = 0;
    downed = instance_create(x, y, obj_downed_player);
    downed.player_num = player_num;
    downed.sprite_index = global.player[player_num, 25];
    instance_destroy();
}

//Adjust depth
depth = room_height - y;

//Control to not go out of the camera view
x = clamp(x, view_xview, view_xview + view_wview);
y = clamp(y, view_yview, view_yview + view_hview);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Si embestimos...
if(pushing == true){
    other.x += hspeed;
    other.y += vspeed;
    other.status_locked = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_downed_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
action = 1;
//
if(key_action_4){
    mate_number = other.player_num;
    raised_mate = instance_create(other.x, other.y, obj_player);
    raised_mate.player_num = mate_number;
    global.player[mate_number, 3] = round(global.player[mate_number, 2] / 4);
    with(other) instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Test stuff
draw_text(10, 10, global.player[player_num, 11]);
draw_text(10, 30, global.player[player_num, 13]);
draw_text(10, 50, global.player[player_num, 14]);

//Draw stats and stuff
    //Healthbar
draw_sprite_stretched(spr_health_bar, 0, 30, 30 + (player_num * 90), 
                        global.player[player_num, 3] / 
                        global.player[player_num, 2] * 64, 16);
    //First ability and cooldown
draw_sprite(global.player[player_num, 7], 0, 32, 50 + (player_num * 90));
draw_sprite_stretched(spr_cooldown, 0, 32, 50 + (player_num * 90), 
                        alarm_get(1) / 
                        global.player[player_num, 10] * 32, 32);
    //Second ability and cooldown
draw_sprite(global.player[player_num, 12], 0, 64, 50 + (player_num * 90));
draw_sprite_stretched(spr_cooldown, 0, 64, 50 + (player_num * 90), 
                        alarm_get(3) / 
                        global.player[player_num, 15] * 32, 32);
    //Third ability and cooldown
draw_sprite(global.player[player_num, 17], 0, 96, 50 + (player_num * 90));
draw_sprite_stretched(spr_cooldown, 0, 96, 50 + (player_num * 90), 
                        alarm_get(5) / 
                        global.player[player_num, 20] * 32, 32);
    //Use button
switch(action){
    case 0:
        draw_sprite(spr_no_action, 0, 128, 50 + (player_num * 90));
    break;
    case 1:
        draw_sprite(spr_raise, 0, 128, 50 + (player_num * 90));
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//De momento los diferenciamos con un marcador
draw_sprite(spr_general_marker, player_num, x, y);
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
