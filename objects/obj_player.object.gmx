<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_warrior_front_move</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Variables
//De momento unas provisonales
//max_life = 10;
///life = 10;
//defense = 2;
//attack = 5;

pushing = false;

first_duration = 3;
second_duration = 0;
third_duration = 20;

first_cooldown = 10;
second_cooldown = 30;
third_cooldown = 100;


//Datos de manejo
player_num = 0;
direction = 270;
looking_direction = 270; //Alternativa
status_down = 0;
status_locked = false;
movement_speed = 10;    //La acabaremos asignando junto con los stats
/*Actions
    0 - No action
    1 - Raise mate
*/
action = 0; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Well, now we unlock the player
status_locked = false;
speed = 0;
pushing = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Yeah, it´s empty
    //For the moment we only use it´s value

    
//Well, now we unlock the player
status_locked = false;
speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get keys (if not locked)
if(status_locked == false){
    //Check if gampead or keyboard player
    if(global.player[player_num, 0] == 1){
        gamepad_set_axis_deadzone(player_num, 0.2);
        key_up = gamepad_button_check(player_num, gp_padu) || gamepad_axis_value(0, gp_axislv) &lt; -0.2;
        key_down = gamepad_button_check(player_num, gp_padd) || gamepad_axis_value(0, gp_axislv) &gt; 0.2;
        key_left = gamepad_button_check(player_num, gp_padl) || gamepad_axis_value(0, gp_axislh) &lt; -0.2;
        key_right = gamepad_button_check(player_num, gp_padr) || gamepad_axis_value(0, gp_axislh) &gt; 0.2;
        key_action_1 = gamepad_button_check_pressed(player_num, gp_face1);
        key_action_2 = gamepad_button_check_pressed(player_num, gp_face2);
        key_action_3 = gamepad_button_check_pressed(player_num, gp_face3);
        key_action_4 = gamepad_button_check_pressed(player_num, gp_face4);
    }
    else{
        key_up = keyboard_check(vk_up);
        key_down = keyboard_check(vk_down);
        key_left = keyboard_check(vk_left);
        key_right = keyboard_check(vk_right);
        key_action_1 = keyboard_check_pressed(ord('S'));
        key_action_2 = keyboard_check_pressed(ord('D'));
        key_action_3 = keyboard_check_pressed(ord('A'));
        key_action_4 = keyboard_check_pressed(ord('W'));
    }
}
//If not locked (not here now)
//if(status_locked == false){
    //Move it
    //Moving direction
    v_direction = (-key_up + key_down);
    h_direction = (-key_left + key_right);

    //Direction facing
    /*if(v_direction != 0)
        direction = v_direction * -90;
    if(h_direction != 0)
        direction = h_direction * 90 -90;*/
    if(v_direction == -1)
        looking_direction = 90;
    else if(v_direction == 1)
        looking_direction = 270;
    else if(h_direction == -1)
        looking_direction = 180;
    else if(h_direction == 1)
        looking_direction = 0;
    //Movement
    vspeed = v_direction * movement_speed;
    hspeed = h_direction * movement_speed;
    
    //Sprite_control
    switch(looking_direction){
        //Right
        case 0:
            sprite_index = spr_warrior_right_move;
        break;
        //Up
        case 90:
            sprite_index = spr_warrior_back_move;
        break;
        //Left
        case 180:
            sprite_index = spr_warrior_left_move;
        break;
        //Down
        case 270:
            sprite_index = spr_warrior_front_move;
        break;
    }
    //First ability
    if(key_action_1 &amp;&amp; alarm_get(0) == -1){
        status_locked = true;
        attack_instance = instance_create(x, y, obj_basic_attack);
        attack_instance.direction = looking_direction;
        attack_instance.image_angle = attack_instance.direction;
        attack_instance.damage = global.player[player_num, 4];
        //Duration of the ability
        alarm_set(0, first_duration);
        //Cooldown of the ability
        alarm_set(1, first_cooldown);
    }
    //Second
    if(key_action_2 &amp;&amp; alarm_get(3) == -1){
        //Duration of the ability
        //alarm_set(2, second_duration);
        //Cooldown of the ability
        //alarm_set(3, second_cooldown);
    }
    //Third
    if(key_action_3 &amp;&amp; alarm_get(5) == -1){
        status_locked = true;
        direction = looking_direction;
        speed = movement_speed * 3;
        pushing = true;
        //Duration of the ability
        alarm_set(4, third_duration);
        //Cooldown of the ability
        alarm_set(5, third_cooldown);
    }
//}

//Out of combat
if(global.player[player_num, 3] &lt;= 0){
    global.player[player_num, 3] = 0;
    downed = instance_create(x, y, obj_downed_player);
    downed.player_num = player_num;
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Si embestimos...
if(pushing == true){

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_downed_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
action = 1;
//
if(key_action_4){
    mate_number = other.player_num;
    raised_mate = instance_create(other.x, other.y, obj_player);
    raised_mate.player_num = mate_number;
    global.player[mate_number, 3] = 3/*int64(global.player[mate_number, 2] / 4)*/;
    with(other) instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Test stuff
//draw_text(10, 10, global.hex_to_use);
//draw_text(10, 30, global.hostility_to_use);
//draw_text(10, 50, instance_number(obj_enemy1));

//Draw stats and stuff
    //Healthbar
draw_sprite_stretched(spr_health_bar, 0, 30, 30 + (player_num * 90), 
                        global.player[player_num, 3] / 
                        global.player[player_num, 2] * 64, 16);
    //First ability and cooldown
draw_sprite(spr_sword, 0, 32, 50 + (player_num * 90));
draw_sprite_stretched(spr_cooldown, 0, 32, 50 + (player_num * 90), 
                        alarm_get(1) / first_cooldown * 32, 32);
    //Second ability and cooldown
draw_sprite(spr_shield, 0, 64, 50 + (player_num * 90));
draw_sprite_stretched(spr_cooldown, 0, 64, 50 + (player_num * 90), 
                        alarm_get(3) / second_cooldown * 32, 32);
    //Third ability and cooldown
draw_sprite(spr_assault, 0, 96, 50 + (player_num * 90));
draw_sprite_stretched(spr_cooldown, 0, 96, 50 + (player_num * 90), 
                        alarm_get(5) / third_cooldown * 32, 32);
    //Use button
switch(action){
    case 0:
        draw_sprite(spr_no_action, 0, 128, 50 + (player_num * 90));
    break;
    case 1:
        draw_sprite(spr_raise, 0, 128, 50 + (player_num * 90));
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//De momento los diferenciamos con un marcador
draw_sprite(spr_general_marker, player_num, x, y);
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
