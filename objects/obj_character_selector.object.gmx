<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_marker_hand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
player_num = 0;

//For errors
action_button = 0;
show = false;
character_id = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get controls
if(global.player[player_num, 0] == 1){
    gamepad_set_axis_deadzone(player_num, 0.2);
    key_up = gamepad_button_check(player_num, gp_padu) || gamepad_axis_value(player_num, gp_axislv) &lt; -0.2;
    key_down = gamepad_button_check(player_num, gp_padd) || gamepad_axis_value(player_num, gp_axislv) &gt; 0.2;
    key_left = gamepad_button_check(player_num, gp_padl) || gamepad_axis_value(player_num, gp_axislh) &lt; -0.2;
    key_right = gamepad_button_check(player_num, gp_padr) || gamepad_axis_value(player_num, gp_axislh) &gt; 0.2;
    action_button = gamepad_button_check_released(player_num, gp_face1);
    return_button = gamepad_button_check_released(player_num, gp_face2);
}
else{
    key_up = keyboard_check(vk_up);
    key_down = keyboard_check(vk_down);
    key_left = keyboard_check(vk_left);
    key_right = keyboard_check(vk_right);
    action_button = keyboard_check_released(ord('E'));
    return_button = keyboard_check_released(ord('W'));
}

//Move it
//Joystick
//y += v_axis * 20;
//x += h_axis * 20;
//Keys
y += (-key_up + key_down) * 20;
x += (-key_left + key_right) * 20;

//Show control
show = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_character_image">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get the id to show data
character_id = other.character_id;
show = true;
//En guarro
if(action_button){
    //Get the class using the id
        //Should revise
    global.player[player_num, 1] = other.character_id + 1;
    //And his stats, abilities and sprites
        //Life apart
    global.player[player_num, 2] = global.character[other.character_id, 0];    //Max life
    global.player[player_num, 3] = global.character[other.character_id, 0];    //Actual life
        //And the rest
            //Aqu√≠ usamos la longitud del personaje 0 como referencia
    for(i = 1; i &lt; array_length_2d(global.character, 0); i++){
        global.player[player_num, i + 3] = global.character[other.character_id, i];
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Text parameters
draw_set_color(c_white);
draw_set_valign(fa_center);
draw_set_halign(fa_left);

//
if(show == true){
    draw_set_colour(c_black);
    draw_rectangle(x, y, x + 190, y + 150, false);
    draw_set_colour(c_white);
    //De momento lo hacemos asi, luego lo guardaremos bien
    switch(character_id){
        case 0: character_name = "Warrior"; break;
        case 1: character_name = "Ranger"; break;
        case 2: character_name = "Monk"; break;
        case 3: character_name = "Mage"; break;
    }
    draw_text(x + 100, y + 10, character_name);
    draw_text(x + 100, y + 30, "Life: " + string(global.character[character_id, 0]));
    draw_text(x + 100, y + 50, "Defense: " + string(global.character[character_id, 2]));
    draw_text(x + 100, y + 70, "Skills: ");
    draw_text(x + 120, y + 90, global.character[character_id, 3]);
    draw_text(x + 120, y + 110, global.character[character_id, 8]);
    draw_text(x + 120, y + 130, global.character[character_id, 13]);
}

//
draw_self();
//
draw_sprite(spr_general_marker, player_num, x + 20, y + 20);

//To not fuck other texts
draw_set_halign(fa_center);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
