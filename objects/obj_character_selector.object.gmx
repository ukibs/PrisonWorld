<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_marker_hand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
player_num = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get controls
if(global.player[player_num, 0] == 1){
    gamepad_set_axis_deadzone(player_num, 0.2);
    key_up = gamepad_button_check(player_num, gp_padu) || gamepad_axis_value(0, gp_axislv) &lt; -0.2;
    key_down = gamepad_button_check(player_num, gp_padd) || gamepad_axis_value(0, gp_axislv) &gt; 0.2;
    key_left = gamepad_button_check(player_num, gp_padl) || gamepad_axis_value(0, gp_axislh) &lt; -0.2;
    key_right = gamepad_button_check(player_num, gp_padr) || gamepad_axis_value(0, gp_axislh) &gt; 0.2;
}
else{
    key_up = keyboard_check(vk_up);
    key_down = keyboard_check(vk_down);
    key_left = keyboard_check(vk_left);
    key_right = keyboard_check(vk_right);
}

//gamepad_set_axis_deadzone(player_num, 0.2);
//v_axis = gamepad_axis_value(player_num, gp_axislv);
//h_axis = gamepad_axis_value(player_num, gp_axislh);
action_button = gamepad_button_check_pressed(player_num, gp_face1) || keyboard_check_pressed(ord('S'));
return_button = gamepad_button_check_pressed(player_num, gp_face2) || keyboard_check_pressed(ord('D'));

//Move it
//Joystick
//y += v_axis * 20;
//x += h_axis * 20;
//Keys
y += (-key_up + key_down) * 20;
x += (-key_left + key_right) * 20;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_character_image">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//En guarro
if(action_button){
    //Get the class using the id
        //Should revise
    global.player[player_num, 1] = other.character_id + 1;
    //And his stats, abilities and sprites
        //Life apart
    global.player[player_num, 2] = global.character[other.character_id, 0];    //Max life
    global.player[player_num, 3] = global.character[other.character_id, 0];    //Actual life
        //And the rest
    for(i = 4; i &lt; array_length_2d(global.player, player_num); i++){
        global.player[player_num, i] = global.character[other.character_id, i - 3];
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
draw_self();
//
draw_sprite(spr_general_marker, player_num, x + 20, y + 20);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
