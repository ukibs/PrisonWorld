<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_livingTree_front_idle</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
life = 20;
defense = 1;
attack = 4;
movement_speed = 1;

//
speed = movement_speed;
type = 1;

//
alarm_set(0, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Stuff tu applicate ina second step
//Choose skin for the enemy
    //For now with number
switch(type){
    //Living tree
    case 2:
        //Sprites
        front_idle = spr_livingTree_front_idle;
        front_attack = spr_livingTree_front_attack;
        front_death = spr_livingTree_front_death;
        back_idle = spr_livingTree_back_idle;
        back_attack = spr_livingTree_back_attack;
        back_death = spr_livingTree_back_death;
        //Stats
        life = 20;
        defense = 1;
        attack = 4;
        movement_speed = 1;
        speed = movement_speed;
    break;
    //Skeleton
    case 1:
        //Stats
        front_idle = spr_skeleton_front_idle;
        front_attack = spr_skeleton_front_attack;
        front_death = spr_skeleton_front_death;
        back_idle = spr_skeleton_back_idle;
        back_attack = spr_skeleton_back_attack;
        back_death = spr_skeleton_back_death;
        //Stats
        life = 8;
        defense = 1;
        attack = 3;
        movement_speed = 3;
        speed = movement_speed;
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Mira hacia el prota más cercano
if(instance_exists(obj_player)){
    objective = instance_nearest(x, y, obj_player);
    direction = point_direction(x, y, objective.x, objective.y);
}

//Sprite que mostrar
//En guarro
if(speed &gt; 0){
    if(direction &lt;= 180){
        sprite_index = back_idle;
    }
    else{
        sprite_index = front_idle;
    }
}
//Orientación del sprite
if(direction &gt;= 90 &amp;&amp; direction &lt;= 270){
    image_xscale = -1;
}
else{
    image_xscale = 1;
}

//Atacar
if(distance_to_object(objective) &lt; 30 &amp;&amp; life &gt; 0 &amp;&amp;
    sprite_index != back_attack &amp;&amp; sprite_index != front_attack){
    //En guarro
    speed = 0;
    if(direction &lt;= 180){
        sprite_index = back_attack;
    }
    else{
        sprite_index = front_attack;
    }
    image_index = 0;
}

//Muerte
if(life &lt;= 0 &amp;&amp; sprite_index != back_death &amp;&amp; sprite_index != front_death){
    if(direction &lt;= 180){
        sprite_index = back_death;
    }
    else{
        sprite_index = front_death;
    }
    image_index = 0;
    speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Muerte definitva
if(sprite_index == front_death ||
    sprite_index == back_death)
    instance_destroy();
//Realziar ataque
if(sprite_index == front_attack ||
    sprite_index == back_attack){ //Habrá que retocarlo
    attack_instance = instance_create(x, y, obj_diagonal_attack);
    attack_instance.direction = direction + 45;
    attack_instance.image_angle = attack_instance.direction;
    attack_instance.damage = attack;
    speed = movement_speed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
