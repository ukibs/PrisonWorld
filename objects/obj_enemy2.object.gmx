<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
life = 20;
defense = 1;
attack = 4;
movement_speed = 1;

//
type = 1;

//
status_locked = false;

//For some abilities
last_attack_done = 0;
last_attack_received = 0;

//Behaviour (array of possible actions)
    //This requires a correct order to work well
    //Default behaviour for the enemies
behaviour[0] = "Melee Attack";
behaviour[1] = "Aproach";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Alarm for unlocking
status_locked = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Mira hacia el prota más cercano
if(instance_exists(obj_player)){
    objective = instance_nearest(x, y, obj_player);
    direction = point_direction(x, y, objective.x, objective.y);
}

//Check behaviour
if(life &gt; 0 &amp;&amp; status_locked == false &amp;&amp; instance_exists(obj_player)){
    done = false;
    for(i = 0; i &lt; array_length_1d(behaviour); i++){
        switch(behaviour[i]){
            //Basic melee attack
            case "Melee Attack":
                //If the attack hasn´t started
                if(distance_to_object(objective) &lt; 20 &amp;&amp; life &gt; 0 &amp;&amp;
                    sprite_index != back_attack &amp;&amp; sprite_index != front_attack){
                    //En guarro
                    speed = 0;
                    if(direction &lt;= 180){
                        sprite_index = back_attack;
                    }
                    else{
                        sprite_index = front_attack;
                    }
                    image_index = 0;
                    done = true;
                }
                if(sprite_index == back_attack || sprite_index == front_attack)
                    done = true;
            break;
            //Aproach to the player
                //This should be the last one in all the enemies
            case "Aproach":
                distanceX = abs(objective.x - x);
                distanceY = abs(objective.y - y);
                //If it´s farer in x
                if(distanceX &gt; distanceY)
                    x += sign(objective.x - x) * movement_speed;
                else    //If not
                    y += sign(objective.y - y) * movement_speed;
                //Sprite using the direction parameter
                if(direction &lt;= 180)
                    sprite_index = back_idle;
                else
                    sprite_index = front_idle;
                //And orientation
                if(direction &gt;= 90 &amp;&amp; direction &lt;= 270)
                    image_xscale = 1;
                else
                    image_xscale = -1;
                //Aaaand done
                done = true;
            break;
            //Move away from the players, basically the opposite to the upper one
            case "Move Away":
                if(distance_to_object(objective) &lt; 300){
                    //Point it on the opposite direction
                    direction = direction + 180;
                    if(direction &gt; 360) direction -= 360;
                    //Get distance in both planes
                    distanceX = abs(objective.x - x);
                    distanceY = abs(objective.y - y);
                    //If it´s farer in x
                    if(distanceX &gt; distanceY)
                        x -= sign(objective.x - x) * movement_speed;
                    else    //If not
                        y -= sign(objective.y - y) * movement_speed;
                    //Sprite using the direction parameter
                    if(direction &lt;= 180)
                        sprite_index = back_idle;
                    else
                        sprite_index = front_idle;
                    //And orientation
                    if(direction &gt;= 90 &amp;&amp; direction &lt;= 270)
                        image_xscale = 1;
                    else
                        image_xscale = -1;
                    //Aaaand done
                    done = true;
                }
            break;
            //Offensive teleport
            case "Offensive Teleport":
                //A little of randomness
                x = random_range(objective.x - 20, objective.x + 20);
                y = random_range(objective.y - 20, objective.y + 20);
                //Aaaand done
                done = true;
            break;
            //Move around
            case "Move Around":
                //Point it on the opposite direction
                direction = direction + 90;
                if(direction &gt; 360) direction -= 360;
                //Get distance in both planes
                distanceX = abs(objective.x - x);
                distanceY = abs(objective.y - y);
                //If it´s farer in x
                if(distanceX &lt; distanceY)
                    x += sign(objective.x - x) * movement_speed;
                else    //If not
                    y += sign(objective.y - y) * movement_speed;
                //Sprite using the direction parameter
                if(direction &lt;= 180)
                    sprite_index = back_idle;
                else
                    sprite_index = front_idle;
                //And orientation
                if(direction &gt;= 90 &amp;&amp; direction &lt;= 270)
                    image_xscale = 1;
                else
                    image_xscale = -1;
                //Aaaand done
                done = true;
            break;
            //Charge
            case "Charge":
                //Get distance in both planes
                distanceX = abs(objective.x - x);
                distanceY = abs(objective.y - y);
                if(distanceX &lt; 20 || distanceY &lt; 20){
                    charge = true;
                }
            break;
        }
        //If the attide has been selected...
        if(done == true)
            break;
    }
}
//Stun control
if(status_locked == true){
    if(direction &lt;= 180)
        sprite_index = back_idle;
    else
        sprite_index = front_idle;
    image_index = 0;
}
//Muerte
if(life &lt;= 0 &amp;&amp; sprite_index != back_death &amp;&amp; sprite_index != front_death){
    if(direction &lt;= 180){
        sprite_index = back_death;
    }
    else{
        sprite_index = front_death;
    }
    image_index = 0;
}
//Adjust depth
depth = room_height - y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Muerte definitva
if(sprite_index == front_death ||
    sprite_index == back_death)
    instance_destroy();
//Realziar ataque
if(sprite_index == front_attack ||
    sprite_index == back_attack){ //Habrá que retocarlo
    attack_instance = instance_create(x, y, obj_diagonal_attack);
    attack_instance.direction = direction + 45;
    attack_instance.image_angle = attack_instance.direction;
    attack_instance.damage = attack;
    //Return to normal sprite
    sprite_index = front_idle;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
draw_text(10, 10, array_length_1d(behaviour));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
