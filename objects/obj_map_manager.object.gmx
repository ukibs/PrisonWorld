<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_marker_hand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//First of all...
randomize();
//Position (for the terrain checking)
x = room_width/2;
y = room_height/2;

//Variables
//check = true;
paused = false;

//Check if thereÂ´s already places
if(array_height_2d(global.hex) &lt; 2){
    script_execute(scr_spam_initial_places);
    global.lastX = room_width/2;
    global.lastY = room_height/2;
}
else{
    //If yes put the already existant
    for(i = 0; i &lt; array_length_1d(global.map_tile); i++){
        global.map_tile[i] = instance_create(global.hex[i, 0], global.hex[i, 1], obj_test_place);
        global.map_tile[i].terrain = global.hex[i, 2];
        global.map_tile[i].hostility = global.hex[i, 3];
        global.map_tile[i].hex_id = global.hex[i, 4];
    }
}
//Set the player and the marker
player_group = instance_create(global.lastX, global.lastY, obj_adventurer_group);
map_marker = instance_create(global.lastX, global.lastY, obj_marker_hand);


//Place the unknown terrains when start
//We know the 0 is already sorrounded
    for(i = 1; i &lt; array_length_1d(global.map_tile); i++){
        //Upper one
        if(place_empty(global.map_tile[i].x, 
                        global.map_tile[i].y - sprite_get_height(spr_test_place)))
            instance_create(global.map_tile[i].x, 
                        global.map_tile[i].y - sprite_get_height(spr_test_place),
                        obj_unknown_place);
        //
        if(place_empty(global.map_tile[i].x + (sprite_get_width(spr_test_place)*3/4), 
                        global.map_tile[i].y - sprite_get_height(spr_test_place)/2))
            instance_create(global.map_tile[i].x + (sprite_get_width(spr_test_place)*3/4), 
                        global.map_tile[i].y - sprite_get_height(spr_test_place)/2,
                        obj_unknown_place);
        //
        if(place_empty(global.map_tile[i].x + (sprite_get_width(spr_test_place)*3/4), 
                        global.map_tile[i].y + sprite_get_height(spr_test_place)/2))
            instance_create(global.map_tile[i].x + (sprite_get_width(spr_test_place)*3/4), 
                        global.map_tile[i].y + sprite_get_height(spr_test_place)/2,
                        obj_unknown_place);
        //Down one
        if(place_empty(global.map_tile[i].x, 
                        global.map_tile[i].y + sprite_get_height(spr_test_place)))
            instance_create(global.map_tile[i].x, 
                        global.map_tile[i].y + sprite_get_height(spr_test_place),
                        obj_unknown_place);
        //
        if(place_empty(global.map_tile[i].x - (sprite_get_width(spr_test_place)*3/4), 
                        global.map_tile[i].y - sprite_get_height(spr_test_place)/2))
            instance_create(global.map_tile[i].x - (sprite_get_width(spr_test_place)*3/4), 
                        global.map_tile[i].y - sprite_get_height(spr_test_place)/2,
                        obj_unknown_place);
        //
        if(place_empty(global.map_tile[i].x - (sprite_get_width(spr_test_place)*3/4), 
                        global.map_tile[i].y + sprite_get_height(spr_test_place)/2))
            instance_create(global.map_tile[i].x - (sprite_get_width(spr_test_place)*3/4), 
                        global.map_tile[i].y + sprite_get_height(spr_test_place)/2,
                        obj_unknown_place);
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get keys
key_pause = gamepad_button_check_released(0, gp_start) || keyboard_check_released(vk_escape);
key_quit = gamepad_button_check_released(0, gp_face1) || keyboard_check_released(vk_space);

//Pause
if(key_pause){
    if(!paused){
        instance_deactivate_all(true);
        paused = true;
    }
    else{
        instance_activate_all();
        paused = false;
    }
}
//Quit
if(key_quit &amp;&amp; paused){
    room_goto(room_menu);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
draw_set_color(c_white);
//draw_text(10, 10, array_length_1d(global.map_tile));
//draw_text(10, 30, array_height_2d(global.hex));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
/*for(i = 0; i &lt; array_length_1d(path_check); i++){
    draw_sprite(spr_tile_marker, 0, path_check[i].x, path_check[i].y);
}*/

//
draw_set_color(c_white);
draw_set_valign(fa_center);
draw_set_halign(fa_center);


//Pause instructions
if(paused){
    draw_text(view_xview + view_wview/2, view_yview + 200, "PAUSED");
    draw_text(view_xview + view_wview/2, view_yview + 400, "START to continue");
    draw_text(view_xview + view_wview/2, view_yview + 450, "A to quit");
}
else{ //Stuff to show when not paused
    switch(global.mission){
        //Exploration
        case 1:
            draw_text(view_xview + view_wview/2, view_yview + 50, 
                "EXPLORE NEW AREAS (" + string(global.mission_progress) + "/" 
                + string(global.mission_requirement) + ")");
        break;
        //Extermination
        case 2:
            draw_text(view_xview + view_wview/2, view_yview + 50, 
                "REDUCE HOSTILITY IN ANY AREA (" + string(global.mission_progress) + "/" 
                + string(global.mission_requirement) + ")");
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
