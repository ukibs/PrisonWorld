<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_marker_hand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-11</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Variables
//actual_tile = map_tile[0];
terrain_text = "fsdhst";
terrain_hostility = 0;
//
player_group = instance_find(obj_adventurer_group, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get controls
key_up = gamepad_button_check(0, gp_padu) || keyboard_check(vk_up);
key_down = gamepad_button_check(0, gp_padd) || keyboard_check(vk_down);
key_left = gamepad_button_check(0, gp_padl) || keyboard_check(vk_left);
key_right = gamepad_button_check(0, gp_padr) || keyboard_check(vk_right);

gamepad_set_axis_deadzone(0, 0.2);
v_axis = gamepad_axis_value(0, gp_axislv);
h_axis = gamepad_axis_value(0, gp_axislh);
moving_button = gamepad_button_check_released(0, gp_face1) || keyboard_check_released(ord('E'));
action_button = gamepad_button_check_released(0, gp_face4) || keyboard_check_released(vk_space);
show_button = gamepad_button_check(0, gp_face3) || keyboard_check(ord('Q'));

//Move it
//Joystick
y += v_axis * 20;
x += h_axis * 20;
//Keys
y += (-key_up + key_down) * 20;
x += (-key_left + key_right) * 20;

//Execute action depending on place
if(action_button){
    group = instance_find(obj_adventurer_group, 0);
    switch(group.action){
        case 0:
            room_goto(room_settlement);
        break;
        case 1:
            //Stop
            if(group.speed &gt; 0){
                group.destinationX = group.x;
                group.destinationY = group.y;
                group.speed = 0;
                if(group.alarm[0] &gt; -1)
                    group.accumulated_time = group.alarm[0];
                group.alarm[0] = -1;
                group.direction = 270;
            }
            else{
                    //Cuando la hagamos
                    //room_goto(room_camp);
            }
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_unknown_place">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set the group their new destiantion
if(moving_button){
    player_group.destinationX = x;
    player_group.destinationY = y;
    player_group.alarm[0] = player_group.accumulated_time;
}
//
terrain_text = "Unknown";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_test_place">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set the group their new destiantion
if(moving_button){
    player_group.destinationX = x;
    player_group.destinationY = y;
    player_group.alarm[0] = player_group.accumulated_time;
    player_group.direction = point_direction(player_group.x, player_group.y,
                                x, y);
}
//Get the data
terrain = other.terrain;
switch(terrain){
    case 0:
        terrain_text = "Settlement";
    break;
    case 1:
        terrain_text = "Plains";
    break;
    case 2:
        terrain_text = "Swamp";
    break;
    case 3:
        terrain_text = "Forest";
    break;
}
terrain_hostility = other.hostility;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Control stuff
//draw_set_colour(c_white);
//draw_text(10, 10, direction_drawing);

draw_text(1200, 650, "A GO");
draw_text(1200, 550, "X SHOW HOSTILITY");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Details of the terrain
draw_set_colour(c_black);
draw_rectangle(x, y, x + 190, y + 100, false);
draw_set_colour(c_white);
draw_text(x + 100, y + 10, terrain_text);
//Hostitly text
if(place_meeting(x, y, obj_test_place)){
    if(terrain_hostility &gt; 80)
        draw_text(x + 100, y + 30, "Nope");
    else if(terrain_hostility &gt; 60)
        draw_text(x + 100, y + 30, "Dangeorus");
    else if(terrain_hostility &gt; 40)
        draw_text(x + 100, y + 30, "Moderate");
    else if(terrain_hostility &gt; 20)
        draw_text(x + 100, y + 30, "Quiete");
    else
        draw_text(x + 100, y + 30, "Peaceful");
}
//And then draw the icon
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
