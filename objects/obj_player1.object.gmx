<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_warrior_front_move</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_player</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Variables
//De momento unas provisonales
life = 10;
defense = 2;
attack = 5;

//
direction = 270;
looking_direction = 270; //Alternativa
status_down = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get keys
gamepad_set_axis_deadzone(0, 0.2);
key_up = gamepad_button_check(0, gp_padu) || gamepad_axis_value(0, gp_axislv) &lt; -0.2;
key_down = gamepad_button_check(0, gp_padd) || gamepad_axis_value(0, gp_axislv) &gt; 0.2;
key_left = gamepad_button_check(0, gp_padl) || gamepad_axis_value(0, gp_axislh) &lt; -0.2;
key_right = gamepad_button_check(0, gp_padr) || gamepad_axis_value(0, gp_axislh) &gt; 0.2;
key_action_1 = gamepad_button_check_pressed(0, gp_face1);
key_action_2 = gamepad_button_check_pressed(0, gp_face2);
key_action_3 = gamepad_button_check_pressed(0, gp_face3);
key_action_4 = gamepad_button_check_pressed(0, gp_face4);

//If not down
if(status_down == 0){
    //Move it
    //Moving direction
    v_direction = (-key_up + key_down);
    h_direction = (-key_left + key_right);

    //Direction facing
    /*if(v_direction != 0)
        direction = v_direction * -90;
    if(h_direction != 0)
        direction = h_direction * 90 -90;*/
    if(v_direction == -1)
        looking_direction = 90;
    else if(v_direction == 1)
        looking_direction = 270;
    else if(h_direction == -1)
        looking_direction = 180;
    else if(h_direction == 1)
        looking_direction = 0;
    //Movement
    vspeed = v_direction * 10;
    hspeed = h_direction * 10;
    
    //Sprite_control
    switch(looking_direction){
        //Right
        case 0:
            sprite_index = spr_warrior_right_move;
        break;
        //Up
        case 90:
            sprite_index = spr_warrior_back_move;
        break;
        //Left
        case 180:
            sprite_index = spr_warrior_left_move;
        break;
        //Down
        case 270:
            sprite_index = spr_warrior_front_move;
        break;
    }
    //Basic attack
    if(key_action_1){
        attack_instance = instance_create(x, y, obj_basic_attack);
        attack_instance.direction = looking_direction;
        attack_instance.image_angle = attack_instance.direction;
        attack_instance.damage = attack;
    }
}

//Out of combat
if(life &lt;= 0){
    status_down = 1;
    sprite_index = spr_warrior_down;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//De momento guarro
//with(other) instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Test stuff
draw_text(10, 10, global.hex_to_use);
draw_text(10, 30, global.hostility_to_use);
draw_text(10, 50, instance_number(obj_enemy1));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
